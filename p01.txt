Câu 1: Sử dụng tìm kiếm theo chiều sâu để tìm một điểm cố định:
Chú ý: Sử dụng Stack, Queue, Priority Queue được cung cấp sẵn trong util.py
Yêu cầu: Implement thuật toán DFS trong hàm depthFirstSearch, chạy thử với:

python pacman.py -l tinyMaze -p SearchAgent
python pacman.py -l mediumMaze -p SearchAgent
python pacman.py -l bigMaze -z .5 -p SearchAgent

Câu 2: Tìm kiếm theo chiều rộng:
Implement thuật toán BFS trong hàm breadthFirstSearch, chạy thử với:

python pacman.py -l mediumMaze -p SearchAgent -a fn=bfs
python pacman.py -l bigMaze -p SearchAgent -a fn=bfs -z .5

Câu 3: Thay đổi hàm chi phí:
BFS tìm ra con đường ít hành động nhất để đạt được mục đích, nhưng sẽ có những con đường tốt nhất khác trong một vài trường hợp khác. Ví dụ như để ăn được nhiều thức ăn hơn, để tránh các con boss. Implement thuật toán UCS trong hàm uniformCostSearch. Chạy thử với:

python pacman.py -l mediumMaze -p SearchAgent -a fn=ucs
python pacman.py -l mediumDottedMaze -p StayEastSearchAgent
python pacman.py -l mediumScaryMaze -p StayWestSearchAgent

Câu 4: Tìm kiếm A*:
Implement thuật toán A* trong hàm aStarSearch. Sử dụng khoảng cách Manhattan để test thuật toán A*:

python pacman.py -l bigMaze -z .5 -p SearchAgent -afn=astar,heuristic=manhattanHeuristic

Câu 5: Tìm tất cả các góc:
Sức mạnh của A* được thể hiện trong những vấn đề khó khăn hơn. Map trong câu này được thiết kế với 4 viên thức ăn ở 4 góc khác nhau. Cần tìm đường đi ngắn nhất để ăn được cả 4 viên này. Implement class CornersProblem, cần có biến trạng thái thể hiện các góc đã được đi tới trước đây chưa. Chạy thử:

python pacman.py -l tinyCorners -p SearchAgent -a fn=bfs,prob=CornersProblem
python pacman.py -l mediumCorners -p SearchAgent -a fn=bfs,prob=CornersProblem

Câu 6: Tìm tất cả các góc với Heuristic:
Implement 1 thuật toán heuristic thích hợp cho hàm cornersHeuristic, chạy thử với:

python pacman.py -l mediumCorners -p AStarCornersAgent -z 0.5

Câu 7: Ăn hết các viên thức ăn:
Implement hàm foodHeuristic và chạy thử:

python pacman.py -l trickySearch -p AStarFoodSearchAgent

Câu 8: Tìm kiếm không tối ưu:
Xây dựng một agent tham lam ăn viên thức ăn ở gần nhất với hàm findPathToClosestDot và chạy thử:

python pacman.py -l bigSearch -p ClosestDotSearchAgent -z .5

Để làm được điều này, ta hoàn thiện class AnyFoodSearchProblem
